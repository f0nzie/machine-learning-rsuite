
R version 3.4.4 Patched (2018-03-17 r74422) -- "Someone to Lean On"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "schoenberg"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('schoenberg')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("confint.fderiv")
> ### * confint.fderiv
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: confint.fderiv
> ### Title: Point-wise and simultaneous confidence intervals for derivatives
> ###   of smooths
> ### Aliases: confint.fderiv
> 
> ### ** Examples
> 
> library("mgcv")
Loading required package: nlme
This is mgcv 1.8-23. For overview type 'help("mgcv-package")'.
> set.seed(2)
> dat <- gamSim(1, n = 400, dist = "normal", scale = 2)
Gu & Wahba 4 term additive model
> mod <- gam(y ~ s(x0) + s(x1) + s(x2) + s(x3), data = dat, method = "REML")
> 
> ## first derivatives of all smooths...
> fd <- fderiv(mod)
> 
> ## point-wise interval
> ci <- confint(fd, type = "confidence")
> head(ci)
   term      lower      est    upper
1 s(x0) -0.8496033 4.112256 9.074116
2 s(x0) -0.8489453 4.112287 9.073519
3 s(x0) -0.8448851 4.112468 9.069821
4 s(x0) -0.8329611 4.112988 9.058936
5 s(x0) -0.8108549 4.113933 9.038721
6 s(x0) -0.7769722 4.115360 9.007693
> 
> ## simultaneous interval for smooth term of x1
> set.seed(42)
> x1.sint <- confint(fd, parm = "x1", type = "simultaneous", nsim = 1000)
> head(x1.sint)
   term     lower      est    upper
1 s(x1) -5.249863 1.423165 8.096193
2 s(x1) -5.248720 1.423211 8.095142
3 s(x1) -5.243447 1.423425 8.090297
4 s(x1) -5.232857 1.423860 8.080577
5 s(x1) -5.215491 1.424591 8.064672
6 s(x1) -5.189990 1.425697 8.041385
> 
> 
> 
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("confint.gam")
> ### * confint.gam
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: confint.gam
> ### Title: Point-wise and simultaneous confidence intervals for smooths
> ### Aliases: confint.gam confint.gamm
> 
> ### ** Examples
> 
> library("mgcv")
Loading required package: nlme
This is mgcv 1.8-23. For overview type 'help("mgcv-package")'.
> set.seed(2)
> dat <- gamSim(1, n = 400, dist = "normal", scale = 2)
Gu & Wahba 4 term additive model
> mod <- gam(y ~ s(x0) + s(x1) + s(x2) + s(x3), data = dat, method = "REML")
> ##'
> ## point-wise interval
> ci <- confint(mod, parm = "x1", type = "confidence")
> head(ci)
  smooth           x1      est        se     crit    lower    upper
1  s(x1) 0.0006632213 5.888546 0.3134611 1.959964 5.274174 6.502919
2  s(x1) 0.0056813456 5.895688 0.3045623 1.959964 5.298757 6.492619
3  s(x1) 0.0106994698 5.902830 0.2958458 1.959964 5.322983 6.482677
4  s(x1) 0.0157175940 5.909974 0.2873297 1.959964 5.346818 6.473130
5  s(x1) 0.0207357183 5.917121 0.2790332 1.959964 5.370226 6.464016
6  s(x1) 0.0257538425 5.924272 0.2709761 1.959964 5.393169 6.455376
> ##'
> ## simultaneous interval for smooth term of x1
> set.seed(42)
> si <- confint(mod, parm = "x1", type = "simultaneous", nsim = 100)
> head(si)
  smooth           x1      est        se     crit    lower    upper
1  s(x1) 0.0006632213 5.888546 0.3134611 2.772397 5.019507 6.757585
2  s(x1) 0.0056813456 5.895688 0.3045623 2.772397 5.051320 6.740056
3  s(x1) 0.0106994698 5.902830 0.2958458 2.772397 5.082628 6.723032
4  s(x1) 0.0157175940 5.909974 0.2873297 2.772397 5.113382 6.706566
5  s(x1) 0.0207357183 5.917121 0.2790332 2.772397 5.143530 6.690712
6  s(x1) 0.0257538425 5.924272 0.2709761 2.772397 5.173019 6.675526
> 
> 
> 
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("datagen")
> ### * datagen
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: datagen
> ### Title: Generate data over the range of variables used in smooths
> ### Aliases: datagen datagen.mgcv.smooth datagen.gam datagen.gamm
> 
> ### ** Examples
> 
> library("mgcv")
Loading required package: nlme
This is mgcv 1.8-23. For overview type 'help("mgcv-package")'.
> 
> ## 1d example
> set.seed(2)
> dat <- gamSim(1, n = 400, dist = "normal", scale = 2)
Gu & Wahba 4 term additive model
> m1 <- gam(y ~ s(x0) + s(x1) + s(x2) + s(x3), data = dat, method = "REML")
> df <- datagen(m1)
> head(df)
   term           x
1 s(x0) 0.007109038
2 s(x0) 0.012087246
3 s(x0) 0.017065454
4 s(x0) 0.022043662
5 s(x0) 0.027021870
6 s(x0) 0.032000078
> 
> ## 2d example
> dat <- gamSim(2, n = 400, dist = "normal", scale = 2)
Bivariate smoothing example
> m2 <- gam(y ~ s(x, z), data = dat$data, method = "REML")
> df <- datagen(m2)
> head(df)
  smooth          x1          x2
1 s(x,z) 0.001867117 0.002381104
2 s(x,z) 0.006878970 0.002381104
3 s(x,z) 0.011890823 0.002381104
4 s(x,z) 0.016902676 0.002381104
5 s(x,z) 0.021914529 0.002381104
6 s(x,z) 0.026926382 0.002381104
> ## alternative showing using the mgcv.smooth method for a single smooth
> df2 <- datagen(m2[["smooth"]][[1L]], data = dat$data)
> head(df2)
  smooth          x1          x2
1 s(x,z) 0.001867117 0.002381104
2 s(x,z) 0.011941448 0.002381104
3 s(x,z) 0.022015779 0.002381104
4 s(x,z) 0.032090110 0.002381104
5 s(x,z) 0.042164441 0.002381104
6 s(x,z) 0.052238771 0.002381104
> 
> 
> 
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("draw.evaluated_smooth")
> ### * draw.evaluated_smooth
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: draw.evaluated_smooth
> ### Title: Plot estimated smooths
> ### Aliases: draw.evaluated_smooth draw.evaluated_1d_smooth
> ###   draw.evaluated_2d_smooth draw.evaluated_2d_smooth
> ###   draw.evaluated_re_smooth
> 
> ### ** Examples
> 
> library("mgcv")
Loading required package: nlme
This is mgcv 1.8-23. For overview type 'help("mgcv-package")'.
> 
> set.seed(2)
> dat <- gamSim(1, n = 400, dist = "normal", scale = 2)
Gu & Wahba 4 term additive model
> m1 <- gam(y ~ s(x0) + s(x1) + s(x2) + s(x3), data = dat, method = "REML")
> 
> sm <- evaluate_smooth(m1, "s(x2)")
> draw(sm)
> 
> set.seed(2)
> dat <- gamSim(2, n = 4000, dist = "normal", scale = 1)
Bivariate smoothing example
> m2 <- gam(y ~ s(x, z, k = 40), data = dat$data, method = "REML")
> 
> sm <- evaluate_smooth(m2, "s(x,z)", n = 100)
> draw(sm)
> 
> ## now the standard error the smooth instead
> draw(sm, show = "se")
> 
> 
> 
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("draw.gam")
> ### * draw.gam
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: draw.gam
> ### Title: Plot estimated smooths from a fitted GAM
> ### Aliases: draw.gam
> 
> ### ** Examples
> 
> library("mgcv")
Loading required package: nlme
This is mgcv 1.8-23. For overview type 'help("mgcv-package")'.
> 
> set.seed(2)
> dat <- gamSim(1, n = 400, dist = "normal", scale = 2)
Gu & Wahba 4 term additive model
> m1 <- gam(y ~ s(x0) + s(x1) + s(x2) + s(x3), data = dat, method = "REML")
> 
> draw(m1)
> 
> set.seed(2)
> dat <- gamSim(2, n = 4000, dist = "normal", scale = 1)
Bivariate smoothing example
> m2 <- gam(y ~ s(x, z, k = 30), data = dat$data, method = "REML")
> 
> draw(m2)
> 
> dat <- gamSim(4)
Factor `by' variable example
> m3 <- gam(y ~ fac + s(x2, by = fac) + s(x0), data = dat)
> 
> draw(m3, scales = "fixed")
> 
> 
> 
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("evaluate_smooth")
> ### * evaluate_smooth
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: evaluate_smooth
> ### Title: Evaluate a smooth
> ### Aliases: evaluate_smooth evaluate_smooth.gam evaluate_smooth.gamm
> 
> ### ** Examples
> 
> library("mgcv")
Loading required package: nlme
This is mgcv 1.8-23. For overview type 'help("mgcv-package")'.
> set.seed(2)
> dat <- gamSim(1, n = 400, dist = "normal", scale = 2)
Gu & Wahba 4 term additive model
> m1 <- gam(y ~ s(x0) + s(x1) + s(x2) + s(x3), data = dat, method = "REML")
> 
> head(evaluate_smooth(m1, "s(x1)"))
  smooth           x1       est        se
1  s(x1) 0.0006632213 -1.944733 0.3134611
2  s(x1) 0.0107501579 -1.930377 0.2957587
3  s(x1) 0.0208370945 -1.916014 0.2788680
4  s(x1) 0.0309240311 -1.901632 0.2629466
5  s(x1) 0.0410109677 -1.887206 0.2481575
6  s(x1) 0.0510979043 -1.872698 0.2346391
> 
> ## 2d example
> set.seed(2)
> dat <- gamSim(2, n = 4000, dist = "normal", scale = 1)
Bivariate smoothing example
> m2 <- gam(y ~ s(x, z, k = 30), data = dat$data, method = "REML")
> 
> head(evaluate_smooth(m2, "s(x,z)", n = 100))
  smooth            x            z       est        se
1 s(x,z) 2.298248e-05 4.321919e-05 0.1226246 0.1149179
2 s(x,z) 1.012240e-02 4.321919e-05 0.1218180 0.1124405
3 s(x,z) 2.022182e-02 4.321919e-05 0.1208805 0.1099417
4 s(x,z) 3.032124e-02 4.321919e-05 0.1198083 0.1074268
5 s(x,z) 4.042066e-02 4.321919e-05 0.1185977 0.1049027
6 s(x,z) 5.052008e-02 4.321919e-05 0.1172456 0.1023753
> 
> 
> 
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("fderiv")
> ### * fderiv
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fderiv
> ### Title: First derivatives of fitted GAM functions
> ### Aliases: fderiv fderiv.gam fderiv.gamm
> 
> ### ** Examples
> 
> library("mgcv")
Loading required package: nlme
This is mgcv 1.8-23. For overview type 'help("mgcv-package")'.
> set.seed(2)
> dat <- gamSim(1, n = 400, dist = "normal", scale = 2)
Gu & Wahba 4 term additive model
> mod <- gam(y ~ s(x0) + s(x1) + s(x2) + s(x3), data = dat, method = "REML")
> 
> ## first derivatives of all smooths...
> fd <- fderiv(mod)
> 
> ## ...and a selected smooth
> fd2 <- fderiv(mod, term = "x1")
> 
> ## Models with factors
> set.seed(2)
> dat <- gamSim(4, n = 400, dist = "normal", scale = 2)
Factor `by' variable example
> mod <- gam(y ~ s(x0) + s(x1) + fac, data = dat, method = "REML")
> 
> ## first derivatives of all smooths...
> fd <- fderiv(mod)
> 
> ## ...and a selected smooth
> fd2 <- fderiv(mod, term = "x1")
> 
> 
> 
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("fix_offset")
> ### * fix_offset
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fix_offset
> ### Title: Fix the names of a data frame containing an offset variable.
> ### Aliases: fix_offset
> 
> ### ** Examples
> 
> ##\testonly{set.seed(2)}
> library("mgcv")
Loading required package: nlme
This is mgcv 1.8-23. For overview type 'help("mgcv-package")'.
> set.seed(2)
> df <- gamSim(1, n = 400, dist = "normal")
Gu & Wahba 4 term additive model
> m <- gam(y ~ s(x0) + s(x1) + offset(x0), data = df, method = "REML")
> names(model.frame(m))
[1] "y"          "offset(x0)" "x0"         "x1"        
> names(fix_offset(m, model.frame(m), offset_value = 1L))
[1] "x0"         "offset(x0)" "x0"         "x0"        
> 
> 
> 
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("is_offset")
> ### * is_offset
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is_offset
> ### Title: Is a model term an offset?
> ### Aliases: is_offset
> 
> ### ** Examples
> 
> library("mgcv")
Loading required package: nlme
This is mgcv 1.8-23. For overview type 'help("mgcv-package")'.
> df <- gamSim(1, n = 400, dist = "normal")
Gu & Wahba 4 term additive model
> m <- gam(y ~ s(x0) + s(x1) + offset(x0), data = df, method = "REML")
> nm <- names(model.frame(m))
> nm
[1] "y"          "offset(x0)" "x0"         "x1"        
> is_offset(nm)
[1] FALSE  TRUE FALSE FALSE
> 
> 
> 
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("simulate")
> ### * simulate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simulate.gam
> ### Title: Simulate from the posterior distribution of a GAM
> ### Aliases: simulate.gam simulate.gamm simulate.scam
> 
> ### ** Examples
> 
> library("mgcv")
Loading required package: nlme
This is mgcv 1.8-23. For overview type 'help("mgcv-package")'.
> set.seed(2)
> dat <- gamSim(1, n = 400, dist = "normal", scale = 2)
Gu & Wahba 4 term additive model
> m1 <- gam(y ~ s(x0) + s(x1) + s(x2) + s(x3), data = dat, method = "REML")
> 
> sims <- simulate(m1, nsim = 5, seed = 42)
> head(sims)
       [,1]      [,2]      [,3]      [,4]      [,5]
1  8.470111  8.502529  9.243253  8.583744  8.888660
2  7.135076  7.166169  7.436497  7.447073  8.036909
3  3.632465  2.544824  3.083198  2.639840  2.612815
4 10.686483 10.415981 11.873220 10.799256 10.865970
5 14.077964 14.273323 14.646527 14.000525 13.707774
6  6.300381  6.205313  6.094017  5.697613  5.943234
> 
> 
> 
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  24.859 0.097 25.019 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
